import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup

from config import BOT_TOKEN, SUPER_ADMINS
from keyboards import main_menu, admin_panel_kb

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ApplyForm(StatesGroup):
    waiting_for_application = State()

# –°—Ç–∞—Ä—Ç
@router.message(F.text == "/start")
async def start_cmd(message: Message):
    user_id = message.from_user.id
    role = "admin" if user_id in SUPER_ADMINS else "user"
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(role))

# –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
@router.message(F.text == "üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def apply_start(message: Message, state: FSMContext):
    await state.set_state(ApplyForm.waiting_for_application)
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:")

@router.message(ApplyForm.waiting_for_application)
async def apply_process(message: Message, state: FSMContext):
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id not in SUPER_ADMINS:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel_kb)

# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
@router.callback_query(F.data == "view_stats")
async def view_stats(call: CallbackQuery):
    await call.message.edit_text(
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 42\nüì¨ –ó–∞—è–≤–∫–∏: 12\nüí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: 14900‚ÇΩ"
    )

@router.callback_query(F.data == "post_to_channels")
async def post_to_channels(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
async def auto_post_news():
    while True:
        await asyncio.sleep(3600)
        # TODO: –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ª–æ–≥–∏–∫–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    asyncio.create_task(auto_post_news())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
