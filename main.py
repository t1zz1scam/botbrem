import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from starlette.responses import JSONResponse

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: –±–∞–∑–∞ –∏ —Ä–æ—É—Ç–µ—Ä—ã
from database import (
    init_db,                   # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)
    run_bigint_migration,      # –ú–∏–≥—Ä–∞—Ü–∏—è id –≤ bigint
    ensure_banned_until_column,# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ banned_until, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    ensure_user_rank_column,   # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ user_rank
    engine,                    # –î–≤–∏–∂–æ–∫ SQLAlchemy
    create_user_if_not_exists, # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
)
from handlers import router as handlers_router  # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from config import BOT_TOKEN, WEBHOOK_URL, SUPERADMIN_ID

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers
dp.include_router(handlers_router)

# –õ–æ–≥–∏—Ä—É–µ–º INFO —É—Ä–æ–≤–µ–Ω—å
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# --- –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.on_event("startup")
async def on_startup():
    logging.info("‚ñ∂ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏–π...")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    await init_db()
    # –ú–∏–≥—Ä–∞—Ü–∏—è id —Å integer –Ω–∞ bigint (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    await run_bigint_migration(engine)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É banned_until
    await ensure_banned_until_column(engine)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É user_rank
    await ensure_user_rank_column(engine)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook —É Telegram
    await bot.set_webhook(WEBHOOK_URL, secret_token=None)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ])

    # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if SUPERADMIN_ID:
        await create_user_if_not_exists(SUPERADMIN_ID)
        logging.info(f"üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω {SUPERADMIN_ID} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# --- –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram ---
@app.post("/bot-webhook")
async def bot_webhook(request: Request):
    update = await request.json()
    await dp.feed_update(bot=bot, update=update)
    return JSONResponse(content={"status": "ok"})

# --- –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å uvicorn ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True,
    )
