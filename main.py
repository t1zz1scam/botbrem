import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

# –ö–æ–Ω—Ñ–∏–≥–∏
from config import BOT_TOKEN, DATABASE_URL
from handlers import router as handlers_router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π router —Å –∞–¥–º–∏–Ω–æ–º –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")

# Dispatcher –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è aiogram 3.x
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –µ–¥–∏–Ω—ã–π router, –≥–¥–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã (admin, profile –∏ –¥—Ä.)
# üí° –í–∞–∂–Ω–æ: router –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RuntimeError
dp.include_router(handlers_router)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

# –ú–∏–≥—Ä–∞—Ü–∏–∏: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ integer -> bigint, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.
async def run_migrations():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
    - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ user_id, resolved_by, issued_by —Å integer –Ω–∞ bigint, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ banned_until, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ rank –≤ user_rank, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ rank
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ user_rank, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    """
    async with engine.begin() as conn:
        await conn.execute(text("""
        DO $$
        BEGIN
            -- bigint –º–∏–≥—Ä–∞—Ü–∏–∏
            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='users' AND column_name='user_id' AND data_type='integer'
            ) THEN
                ALTER TABLE users ALTER COLUMN user_id TYPE BIGINT;
            END IF;

            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='applications' AND column_name='user_id' AND data_type='integer'
            ) THEN
                ALTER TABLE applications ALTER COLUMN user_id TYPE BIGINT;
            END IF;

            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='applications' AND column_name='resolved_by' AND data_type='integer'
            ) THEN
                ALTER TABLE applications ALTER COLUMN resolved_by TYPE BIGINT;
            END IF;

            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='payouts' AND column_name='user_id' AND data_type='integer'
            ) THEN
                ALTER TABLE payouts ALTER COLUMN user_id TYPE BIGINT;
            END IF;

            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='payouts' AND column_name='issued_by' AND data_type='integer'
            ) THEN
                ALTER TABLE payouts ALTER COLUMN issued_by TYPE BIGINT;
            END IF;

            -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ banned_until, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='users' AND column_name='banned_until'
            ) THEN
                ALTER TABLE users ADD COLUMN banned_until TIMESTAMP NULL;
            END IF;

            -- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ rank –≤ user_rank, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è
            IF EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='users' AND column_name='rank'
            ) THEN
                ALTER TABLE users RENAME COLUMN rank TO user_rank;
            END IF;

            -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ user_rank, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ rank
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_name='users' AND column_name='user_rank'
            ) THEN
                ALTER TABLE users ADD COLUMN user_rank VARCHAR(255) NULL;
            END IF;

        END;
        $$;
        """))

# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI
@app.on_event("startup")
async def on_startup():
    logging.info("üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
    await run_migrations()
    logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    logging.info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤!")

# Webhook –¥–ª—è Telegram
@app.post("/bot-webhook")
async def bot_webhook(request: Request):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        logger.info(f"Received update: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        update = Update(**data)
        await dp.feed_update(bot, update)
        logger.info(f"Update processed: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        logger.error(f"Error processing webhook: {e}")
        return JSONResponse(content={"status": "error", "detail": str(e)}, status_code=500)

    return JSONResponse(content={"status": "ok"})

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
@app.get("/check-webhook")
async def check_webhook():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞
        webhook_info = await bot.get_webhook_info()
        logger.info(f"Webhook info: {webhook_info}")
        return {"status": "ok", "webhook_info": webhook_info}
    except Exception as e:
        logger.error(f"Error checking webhook: {e}")
        return {"status": "error", "detail": str(e)}
