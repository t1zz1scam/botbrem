import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

# –ö–æ–Ω—Ñ–∏–≥–∏
from config import BOT_TOKEN, DATABASE_URL
from handlers.admin import router as admin_router
from handlers.profile import router as profile_router  # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π router

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")

# Dispatcher –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è aiogram 3.x
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ router —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
# üí° –í–∞–∂–Ω–æ: –∫–∞–∂–¥—ã–π router –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!
dp.include_router(admin_router)     # –ê–¥–º–∏–Ω–∫–∞
dp.include_router(profile_router)  # –ü—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞—è–≤–∫–∏

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

# –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å integer ‚Üí bigint, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
async def run_bigint_migration():
    async with engine.begin() as conn:
        await conn.execute(text("""
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='users' AND column_name='user_id' AND data_type='integer'
                ) THEN
                    ALTER TABLE users ALTER COLUMN user_id TYPE BIGINT;
                END IF;
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='applications' AND column_name='user_id' AND data_type='integer'
                ) THEN
                    ALTER TABLE applications ALTER COLUMN user_id TYPE BIGINT;
                END IF;
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='applications' AND column_name='resolved_by' AND data_type='integer'
                ) THEN
                    ALTER TABLE applications ALTER COLUMN resolved_by TYPE BIGINT;
                END IF;
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='payouts' AND column_name='user_id' AND data_type='integer'
                ) THEN
                    ALTER TABLE payouts ALTER COLUMN user_id TYPE BIGINT;
                END IF;
            END;
            $$;
        """))

# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI
@app.on_event("startup")
async def on_startup():
    logging.info("üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
    await run_bigint_migration()
    logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    logging.info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤!")

# Webhook –¥–ª—è Telegram
@app.post("/bot-webhook")
async def bot_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)  # ‚¨Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º bot
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return JSONResponse(content={"status": "error", "detail": str(e)}, status_code=500)

    return JSONResponse(content={"status": "ok"})
