import os
import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup

from config import BOT_TOKEN, SUPER_ADMINS
from keyboards import main_menu, admin_panel_kb

logging.basicConfig(level=logging.INFO)

PORT = int(os.getenv("PORT", 8000))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://botbrem.onrender.com{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class ApplyForm(StatesGroup):
    waiting_for_application = State()

@router.message(F.text == "/start")
async def start_cmd(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    role = "admin" if user_id in SUPER_ADMINS else "user"
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(role))

@router.message(F.text == "üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def apply_start(message: Message, state: FSMContext):
    await state.set_state(ApplyForm.waiting_for_application)
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:")

@router.message(ApplyForm.waiting_for_application)
async def apply_process(message: Message, state: FSMContext):
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id not in SUPER_ADMINS:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel_kb)

@router.callback_query(F.data == "view_stats")
async def view_stats(call: CallbackQuery):
    await call.message.edit_text(
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 42\nüì¨ –ó–∞—è–≤–∫–∏: 12\nüí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: 14900‚ÇΩ"
    )

@router.callback_query(F.data == "post_to_channels")
async def post_to_channels(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:")

async def auto_post_news():
    while True:
        await asyncio.sleep(3600)
        # TODO: –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ª–æ–≥–∏–∫–∞

dp.include_router(router)

async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
        logging.info(f"Webhook Update: {data}")
        update = types.Update.parse_obj(data)
        await dp.feed_update(update)  # –í–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
    return web.Response()

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def start_background_tasks(app):
    app['auto_post_task'] = asyncio.create_task(auto_post_news())

async def cleanup_background_tasks(app):
    app['auto_post_task'].cancel()
    try:
        await app['auto_post_task']
    except asyncio.CancelledError:
        pass

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_startup.append(start_background_tasks)
app.on_cleanup.append(cleanup_background_tasks)
app.on_cleanup.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
