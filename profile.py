import os
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup

from database import (
    get_user_by_id, update_user_name, update_user_wallet,
    get_top_users, get_total_earned_today, SessionLocal, Application,
    create_user_if_not_exists
)

router = Router()

SUPERADMIN_ID = int(os.getenv("SUPERADMIN_ID", "0"))

class EditProfile(StatesGroup):
    name = State()
    wallet = State()

class ApplicationForm(StatesGroup):
    message = State()

def profile_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="üíº –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="edit_wallet")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="top_users")],
        [InlineKeyboardButton(text="üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="total_today")],
    ])

def get_main_menu(is_new: bool):
    buttons = []
    if is_new:
        buttons.append([KeyboardButton(text="üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")])
    else:
        buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user = await create_user_if_not_exists(message.from_user.id)
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–ª–∏ –∞–¥–º–∏–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å
    if user.user_id == SUPERADMIN_ID or user.role in ("admin", "superadmin"):
        is_new = False
    else:
        is_new = not user.name and not user.contact

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(is_new)
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = await get_user_by_id(message.from_user.id)

    text = (
        f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üì° –ò–º—è: {user.name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üíº –ö–æ—à–µ–ª–µ–∫: {user.contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.payout:.2f} USDT\n"
        f"üéñ –ó–≤–∞–Ω–∏–µ: {user.role or '–ù–æ–≤–∏—á–æ–∫'}"
    )
    await message.answer(text, reply_markup=profile_kb())

@router.callback_query(F.data == "edit_name")
async def edit_name_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditProfile.name)
    await callback.answer()

@router.message(EditProfile.name)
async def save_new_name(message: types.Message, state: FSMContext):
    await update_user_name(message.from_user.id, message.text)
    await message.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await state.clear()

@router.callback_query(F.data == "edit_wallet")
async def edit_wallet_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
    await state.set_state(EditProfile.wallet)
    await callback.answer()

@router.message(EditProfile.wallet)
async def save_new_wallet(message: types.Message, state: FSMContext):
    await update_user_wallet(message.from_user.id, message.text)
    await message.answer("–ö–æ—à–µ–ª–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await state.clear()

@router.callback_query(F.data == "top_users")
async def top_users(callback: types.CallbackQuery):
    top = await get_top_users("day")
    if not top:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        text = "<b>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        for i, row in enumerate(top, 1):
            text += f"{i}. {row['name']} ‚Äî {row['earned']:.2f} USDT\n"
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "total_today")
async def total_today(callback: types.CallbackQuery):
    total = await get_total_earned_today()
    text = f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total or 0:.2f} USDT"
    await callback.message.answer(text)
    await callback.answer()

@router.message(F.text == "üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
    await state.set_state(ApplicationForm.message)

@router.message(ApplicationForm.message)
async def save_application(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        new_app = Application(user_id=message.from_user.id, message=message.text, status="pending")
        session.add(new_app)
        await session.commit()
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    await state.clear()
