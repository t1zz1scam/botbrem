from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import (
    Application, SessionLocal,
    update_user_role, update_user_rank,
    add_payout, subtract_payout,
    ban_user, unban_user, is_user_banned,
    get_all_users
)
from sqlalchemy.future import select
from sqlalchemy import update
from datetime import datetime, timedelta

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
async def is_admin(user_id: int) -> bool:
    async with SessionLocal() as session:
        user = await session.get("User", user_id)
        if not user:
            return False
        return user.role in ("admin", "superadmin")

async def is_superadmin(user_id: int) -> bool:
    async with SessionLocal() as session:
        user = await session.get("User", user_id)
        if not user:
            return False
        return user.role == "superadmin"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
def admin_main_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏", callback_data="view_applications")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_users")],
        [InlineKeyboardButton(text="‚úè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
        [InlineKeyboardButton(text="üì¢ –ü–æ—Å—Ç—ã", callback_data="admin_posts")],
    ])
    return kb

@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_kb())
    await callback.answer()

@router.callback_query(F.data == "view_applications")
async def view_applications(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    async with SessionLocal() as session:
        result = await session.execute(select(Application).where(Application.status == "pending"))
        applications = result.scalars().all()

    if not applications:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        await callback.answer()
        return

    for app in applications:
        text = (
            f"<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {app.user_id}</b>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{app.message}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {app.status}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app.id}")
        ]])
        await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("approve_"))
async def approve_application(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    app_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id

    async with SessionLocal() as session:
        await session.execute(
            update(Application).where(Application.id == app_id).values(
                status="approved",
                resolved_by=admin_id,
                resolved_at=datetime.utcnow()
            )
        )
        await session.commit()
        app = await session.get(Application, app_id)

    await callback.message.answer(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    try:
        await callback.bot.send_message(app.user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except Exception:
        pass
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    app_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id

    async with SessionLocal() as session:
        await session.execute(
            update(Application).where(Application.id == app_id).values(
                status="rejected",
                resolved_by=admin_id,
                resolved_at=datetime.utcnow()
            )
        )
        await session.commit()
        app = await session.get(Application, app_id)

    await callback.message.answer(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        await callback.bot.send_message(app.user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    await callback.answer()

@router.callback_query(F.data == "view_users")
async def view_users(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    users = await get_all_users()
    if not users:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        await callback.answer()
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for u in users:
        ban_status = f" (–ó–∞–±–∞–Ω–µ–Ω –¥–æ {u.banned_until.strftime('%Y-%m-%d %H:%M')})" if u.banned_until else ""
        text += f"ID: {u.user_id}, –ò–º—è: {u.name or '‚Äî'}, –†–æ–ª—å: {u.role}, –†–∞–Ω–≥: {u.rank}{ban_status}\n"
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "manage_users")
async def manage_users_menu(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="assign_admin")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥", callback_data="change_rank")],
        [InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç—ã", callback_data="manage_payouts")],
        [InlineKeyboardButton(text="–ë–∞–Ω—ã", callback_data="manage_bans")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "assign_admin")
async def assign_admin_start(callback: types.CallbackQuery):
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤
    if not await is_superadmin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.", show_alert=True)
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "assign_admin_waiting_for_user_id")

@router.message(F.text, state="assign_admin_waiting_for_user_id")
async def assign_admin_process(message: types.Message, state):
    if not await is_superadmin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    await update_user_role(user_id, "admin")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await state.clear()

@router.callback_query(F.data == "change_rank")
async def change_rank_start(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏—Ö–ª–µ–±–∞–ª–∞ (60%)", callback_data="rank_–ø—Ä–∏—Ö–ª–µ–±–∞–ª–∞")],
        [InlineKeyboardButton(text="–õ–æ—à–∞–¥—å (70%)", callback_data="rank_–ª–æ—à–∞–¥—å")],
        [InlineKeyboardButton(text="–ú—É–∑—ã–∫–∞–Ω—Ç (80%)", callback_data="rank_–º—É–∑—ã–∫–∞–Ω—Ç")],
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ (0%)", callback_data="rank_user")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manage_users")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("rank_"))
async def change_rank_process(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    rank = callback.data.split("_")[1]
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞–Ω–≥–∞:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "change_rank_waiting_for_user_id")
    await callback.bot["fsm_storage"].update_data(callback.from_user.id, {"selected_rank": rank})

@router.message(F.text, state="change_rank_waiting_for_user_id")
async def change_rank_finish(message: types.Message, state):
    data = await state.get_data()
    rank = data.get("selected_rank", "user")
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    try:
        await update_user_rank(user_id, rank)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        return
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–≥ {rank}.")
    await state.clear()

@router.callback_query(F.data == "manage_payouts")
async def manage_payouts_menu(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="payout_add")],
        [InlineKeyboardButton(text="–û—Ç–Ω—è—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="payout_subtract")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manage_users")],
    ])
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "payout_add")
async def payout_add_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "payout_waiting_user_id")
    await callback.bot["fsm_storage"].update_data(callback.from_user.id, {"action": "add"})

@router.callback_query(F.data == "payout_subtract")
async def payout_subtract_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "payout_waiting_user_id")
    await callback.bot["fsm_storage"].update_data(callback.from_user.id, {"action": "subtract"})

@router.message(F.text, state="payout_waiting_user_id")
async def payout_user_id(message: types.Message, state):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    data = await state.get_data()
    action = data.get("action")
    await state.update_data({"user_id": user_id})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state("payout_waiting_amount")

@router.message(F.text, state="payout_waiting_amount")
async def payout_amount(message: types.Message, state):
    data = await state.get_data()
    user_id = data.get("user_id")
    action = data.get("action")
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    issuer_id = message.from_user.id

    if action == "add":
        await add_payout(user_id, amount, issuer_id)
        await message.answer(f"–í—ã–ø–ª–∞—Ç–∞ {amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    elif action == "subtract":
        await subtract_payout(user_id, amount, issuer_id)
        await message.answer(f"–°—É–º–º–∞ {amount} —É—Å–ø–µ—à–Ω–æ –≤—ã—á—Ç–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await state.clear()

@router.callback_query(F.data == "manage_bans")
async def manage_bans_menu(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban_user_start")],
        [InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unban_user_start")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manage_users")],
    ])
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "ban_user_start")
async def ban_user_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "ban_waiting_user_id")

@router.message(F.text, state="ban_waiting_user_id")
async def ban_user_waiting_user(message: types.Message, state):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    await state.update_data({"ban_user_id": user_id})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state("ban_waiting_hours")

@router.message(F.text, state="ban_waiting_hours")
async def ban_user_waiting_hours(message: types.Message, state):
    try:
        hours = int(message.text)
        if hours <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (>0).")
        return
    data = await state.get_data()
    user_id = data.get("ban_user_id")
    until = datetime.utcnow() + timedelta(hours=hours)
    await ban_user(user_id, until)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {until.strftime('%Y-%m-%d %H:%M:%S UTC')}.")
    await state.clear()

@router.callback_query(F.data == "unban_user_start")
async def unban_user_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "unban_waiting_user_id")

@router.message(F.text, state="unban_waiting_user_id")
async def unban_user_waiting_user(message: types.Message, state):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    await unban_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await state.clear()

# --- –ü–æ—Å—Ç—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª) ---

from config import CHANNEL_IDS

@router.callback_query(F.data == "admin_posts")
async def admin_posts_menu(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="create_post")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.answer("–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–æ–≤:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "create_post")
async def create_post_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await callback.answer()
    await callback.bot["fsm_storage"].set_state(callback.from_user.id, "post_waiting_text")

@router.message(F.text, state="post_waiting_text")
async def create_post_finish(message: types.Message, state):
    text = message.text
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É News
    async with SessionLocal() as session:
        from database import News
        new_post = News(content=text, sent=False)
        session.add(new_post)
        await session.commit()

    await message.answer("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.clear()

    # –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç
    await send_news_to_all_users(text, message.bot)

async def send_news_to_all_users(text: str, bot):
    async with SessionLocal() as session:
        from database import User
        result = await session.execute(select(User))
        users = result.scalars().all()

    for user in users:
        try:
            await bot.send_message(user.user_id, text)
        except Exception:
            continue

@router.callback_query(F.data == "send_news_to_channel")
async def send_news_to_channel(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    async with SessionLocal() as session:
        from database import News
        # –ë–µ—Ä—ë–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        result = await session.execute(select(News).where(News.sent == False))
        news_list = result.scalars().all()

        if not news_list:
            await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª.")
            await callback.answer()
            return

        for news in news_list:
            for ch_id in CHANNEL_IDS:
                try:
                    await callback.bot.send_message(ch_id, news.content)
                except Exception:
                    continue
            news.sent = True
        await session.commit()

    await callback.message.answer("–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.")
    await callback.answer()
