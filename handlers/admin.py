import logging
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Application, SessionLocal, User, Payout
from sqlalchemy.future import select
from datetime import datetime, timedelta
from config import CHANNEL_IDS

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.entities)
async def handle_phone_number(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_entity = next((entity for entity in message.entities if entity.type == 'phone_number'), None)
    if phone_entity:
        phone_number = message.text[phone_entity.offset:phone_entity.offset + phone_entity.length]
        await message.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        logger.info(f"Phone number received: {phone_number} from user {message.from_user.id}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel_kb = InlineKeyboardMarkup(inline_keyboard=[ 
    [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏", callback_data="view_applications")], 
    [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_users")],
    [InlineKeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="assign_admin")],
    [InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="change_rank")],
    [InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—á–∞ / –í—ã—á–∏—Ç–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç", callback_data="manage_payout")],
    [InlineKeyboardButton(text="üö´ –ë–∞–Ω / –ó–∞–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban_user")],
    [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç –≤ –±–æ—Ç–∞", callback_data="post_bot")],
    [InlineKeyboardButton(text="üì¢ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", callback_data="post_channel")],
])

# –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
async def is_admin(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        return user and user.role in ("admin", "superadmin")

async def is_superadmin(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        return user and user.role == "superadmin"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.warning(f"User {message.from_user.id} tried to access admin panel without permissions.")
        return
    await message.answer("üë∑‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_kb)
    logger.info(f"Admin panel accessed by {message.from_user.id}")

# 1) –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "view_applications")
async def view_applications(callback: types.CallbackQuery):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to view applications without admin rights.")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(Application).where(Application.status == "pending"))
        applications = result.scalars().all()

    if not applications:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        logger.info(f"No new applications available for {callback.from_user.id}.")
        return

    for app in applications:
        text = (
            f"<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {app.user_id}</b>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{app.message}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {app.status}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app.id}")
            ]
        ])
        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()

# 2) –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("approve_"))
async def approve_application(callback: types.CallbackQuery):
    app_id = callback.data.split("_")[1]
    async with SessionLocal() as session:
        result = await session.execute(select(Application).where(Application.id == app_id))
        application = result.scalar_one_or_none()
        if application:
            application.status = "approved"
            session.add(application)
            await session.commit()
            await callback.message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application.user_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            logger.info(f"Application {app_id} approved by {callback.from_user.id}.")
        else:
            await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"Application {app_id} not found.")
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: types.CallbackQuery):
    app_id = callback.data.split("_")[1]
    async with SessionLocal() as session:
        result = await session.execute(select(Application).where(Application.id == app_id))
        application = result.scalar_one_or_none()
        if application:
            application.status = "rejected"
            session.add(application)
            await session.commit()
            await callback.message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application.user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            logger.info(f"Application {app_id} rejected by {callback.from_user.id}.")
        else:
            await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"Application {app_id} not found.")
    await callback.answer()

# 3) –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
@router.callback_query(F.data == "assign_admin")
async def assign_admin_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_superadmin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to assign admin without superadmin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state("assign_admin_waiting_for_user_id")

@router.message(F.state == "assign_admin_waiting_for_user_id")
async def assign_admin_confirm(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
        else:
            user.role = "admin"
            session.add(user)
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            logger.info(f"User {message.from_user.id} assigned admin role to user {user_id}.")
    await state.clear()

# 4) –°–º–µ–Ω–∞ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "change_rank")
async def change_rank_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to change rank without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ä–∞–Ω–≥:")
    await state.set_state("change_rank_waiting_for_user_id")

@router.message(F.state == "change_rank_waiting_for_user_id")
async def change_rank_user_id(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
        else:
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            await state.update_data(user_id=user_id)
            await state.set_state("change_rank_waiting_for_rank")

@router.message(F.state == "change_rank_waiting_for_rank")
async def change_rank_select(message: types.Message, state: FSMContext):
    rank = message.text.strip().lower()
    if rank not in ["–ø—Ä–∏—Ö–ª–µ–±–∞–ª–∞", "–ª–æ—à–∞–¥—å", "–º—É–∑—ã–∫–∞–Ω—Ç"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: –ø—Ä–∏—Ö–ª–µ–±–∞–ª–∞, –ª–æ—à–∞–¥—å, –º—É–∑—ã–∫–∞–Ω—Ç.")
        return

    data = await state.get_data()
    user_id = data.get("user_id")
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.user_rank = rank
            session.add(user)
            await session.commit()
            await message.answer(f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {rank}.")
            logger.info(f"User {message.from_user.id} changed rank for {user_id} to {rank}.")
    await state.clear()

# 5) –ë–∞–Ω / –ó–∞–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "ban_user")
async def ban_user_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to ban user without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å:")
    await state.set_state("ban_user_waiting_for_user_id")

@router.message(F.state == "ban_user_waiting_for_user_id")
async def ban_user_confirm(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
        else:
            user.banned = not user.banned
            session.add(user)
            await session.commit()
            status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.banned else "—Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω"
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {status}.")
            logger.info(f"User {message.from_user.id} banned/unbanned user {user_id}.")
    await state.clear()

# 6) –í—ã–¥–∞—á–∞ / –í—ã—á–∏—Ç–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç
@router.callback_query(F.data == "manage_payout")
async def manage_payout_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to manage payouts without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç–∞–º–∏:")
    await state.set_state("manage_payout_waiting_for_user_id")

@router.message(F.state == "manage_payout_waiting_for_user_id")
async def manage_payout_amount(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for payout management.")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            await state.update_data(user_id=user_id)
            await state.set_state("manage_payout_waiting_for_amount")

@router.message(F.state == "manage_payout_waiting_for_amount")
async def manage_payout_confirm(message: types.Message, state: FSMContext):
    amount = message.text.strip()
    if not amount.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    amount = int(amount)
    data = await state.get_data()
    user_id = data.get("user_id")

    # –†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            rank_factor = 0.6 if user.user_rank == "–ø—Ä–∏—Ö–ª–µ–±–∞–ª–∞" else 0.7 if user.user_rank == "–ª–æ—à–∞–¥—å" else 0.8
            payout = amount * rank_factor
            user.balance += payout
            session.add(user)
            await session.commit()
            await message.answer(f"–í—ã–ø–ª–∞—Ç–∞ {payout} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            logger.info(f"User {message.from_user.id} made a payout of {payout} to {user_id}.")
    await state.clear()

# 7) –û—Ç–º–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "cancel_payout")
async def cancel_payout_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to cancel payout without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–ª–∞—Ç—ã:")
    await state.set_state("cancel_payout_waiting_for_user_id")

@router.message(F.state == "cancel_payout_waiting_for_user_id")
async def cancel_payout_confirm(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for payout cancellation.")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            await state.update_data(user_id=user_id)
            await state.set_state("cancel_payout_waiting_for_amount")

@router.message(F.state == "cancel_payout_waiting_for_amount")
async def cancel_payout_confirm_amount(message: types.Message, state: FSMContext):
    amount = message.text.strip()
    if not amount.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    amount = int(amount)
    data = await state.get_data()
    user_id = data.get("user_id")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–ø–ª–∞—Ç—É
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.balance -= amount
            session.add(user)
            await session.commit()
            await message.answer(f"–í—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            logger.info(f"User {message.from_user.id} cancelled payout of {amount} for {user_id}.")
    await state.clear()

# 8) –ü–æ—Å—Ç –≤ –±–æ—Ç–∞
@router.callback_query(F.data == "post_bot")
async def post_to_bot_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to post to bot without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –±–æ—Ç–∞:")
    await state.set_state("post_bot_waiting_for_text")

@router.message(F.state == "post_bot_waiting_for_text")
async def post_to_bot_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    async with SessionLocal() as session:
        users = await session.execute(select(User))
        users = users.scalars().all()

        for user in users:
            await bot.send_message(user.user_id, text)
    await message.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
    logger.info(f"User {message.from_user.id} posted to bot.")

    await state.clear()

# 9) –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
@router.callback_query(F.data == "post_channel")
async def post_to_channel_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to post to channel without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª:")
    await state.set_state("post_channel_waiting_for_text")

@router.message(F.state == "post_channel_waiting_for_text")
async def post_to_channel_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    for channel_id in CHANNEL_IDS:
        await bot.send_message(channel_id, text)
    await message.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    logger.info(f"User {message.from_user.id} posted to channel.")

    await state.clear()
