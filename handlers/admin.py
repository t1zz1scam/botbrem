import logging
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Application, SessionLocal, User, Payout
from sqlalchemy.future import select
from sqlalchemy import update
from datetime import datetime, timedelta
from config import CHANNEL_IDS

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏", callback_data="view_applications")],
    [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_users")],
    [InlineKeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="assign_admin")],
    [InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="change_rank")],
    [InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—á–∞ / –í—ã—á–∏—Ç–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç", callback_data="manage_payout")],
    [InlineKeyboardButton(text="üö´ –ë–∞–Ω / –ó–∞–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban_user")],
    [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç –≤ –±–æ—Ç–∞", callback_data="post_bot")],
    [InlineKeyboardButton(text="üì¢ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", callback_data="post_channel")],
])

# –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
async def is_admin(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        return user and user.role in ("admin", "superadmin")

async def is_superadmin(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        return user and user.role == "superadmin"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.warning(f"User {message.from_user.id} tried to access admin panel without permissions.")
        return
    await message.answer("üë∑‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_kb)
    logger.info(f"Admin panel accessed by {message.from_user.id}")

# 1) –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "view_applications")
async def view_applications(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to view applications without admin rights.")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(Application).where(Application.status == "pending"))
        applications = result.scalars().all()

    if not applications:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        logger.info(f"No new applications available for {callback.from_user.id}.")
        await callback.answer()
        return

    for app in applications:
        text = (
            f"<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {app.user_id}</b>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{app.message}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {app.status}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app.id}")
            ]
        ])
        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()

# 2) –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "view_users")
async def view_users(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to view users without admin rights.")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        logger.info(f"No users found for admin {callback.from_user.id}.")
        await callback.answer()
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for u in users:
        text += f"ID: {u.user_id} | –ò–º—è: {u.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} | –†–æ–ª—å: {u.role or 'user'} | –†–∞–Ω–≥: {getattr(u, 'user_rank', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"

    await callback.message.answer(text)
    await callback.answer()

# 3) –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
@router.callback_query(F.data == "assign_admin")
async def assign_admin_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_superadmin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to assign admin without superadmin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state("assign_admin_waiting_for_user_id")
    await callback.answer()

@router.message(F.state == "assign_admin_waiting_for_user_id")
async def assign_admin_confirm(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ ID
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        logger.error(f"Invalid user ID input by {message.from_user.id}: {message.text}")
        return  # –û–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
        else:
            user.role = "admin"
            session.add(user)
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            logger.info(f"User {message.from_user.id} assigned admin role to user {user_id}.")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# 4) –°–º–µ–Ω–∞ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RANKS = {
    "–ø—Ä–∏—Ö–ª–µ–±–∞–ª–∞": 0.6,
    "–ª–æ—à–∞–¥—å": 0.7,
    "–º—É–∑—ã–∫–∞–Ω—Ç": 0.8
}

@router.callback_query(F.data == "change_rank")
async def change_rank_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to change rank without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ä–∞–Ω–≥:")
    await state.set_state("change_rank_waiting_for_user_id")
    await callback.answer()

@router.message(F.state == "change_rank_waiting_for_user_id")
async def change_rank_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        logger.error(f"Invalid user ID input by {message.from_user.id}: {message.text}")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()  # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
            return

        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n" + "\n".join(RANKS.keys()))
        await state.update_data(user_id=user_id)
        await state.set_state("change_rank_waiting_for_rank")  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

@router.message(F.state == "change_rank_waiting_for_rank")
async def change_rank_select(message: types.Message, state: FSMContext):
    rank = message.text.lower()
    if rank not in RANKS:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {', '.join(RANKS.keys())}")
        logger.error(f"Invalid rank selection by {message.from_user.id}: {rank}")
        return

    data = await state.get_data()
    user_id = data.get("user_id")

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.user_rank = rank
            session.add(user)
            await session.commit()
            await message.answer(f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {rank}.")
            logger.info(f"User {message.from_user.id} changed rank of user {user_id} to {rank}.")
    await state.clear()

# 5) –í—ã–¥–∞—á–∞ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç
@router.callback_query(F.data == "manage_payout")
async def manage_payout_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to manage payouts without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç–æ–π:")
    await state.set_state("payout_waiting_for_user_id")
    await callback.answer()

@router.message(F.state == "payout_waiting_for_user_id")
async def payout_get_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        logger.error(f"Invalid user ID input for payout by {message.from_user.id}: {message.text}")
        return
    await state.update_data(user_id=user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã (–¥–ª—è –≤—ã—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state("payout_waiting_for_amount")

@router.message(F.state == "payout_waiting_for_amount")
async def payout_get_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        logger.error(f"Invalid payout amount input by {message.from_user.id}: {message.text}")
        return
    data = await state.get_data()
    user_id = data.get("user_id")
    admin_id = message.from_user.id
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º —Ä–∞–Ω–≥–∞
        rank = getattr(user, "user_rank", None)
        percent = RANKS.get(rank, 1)
        payout_amount = int(amount * percent)
        user.payout = (user.payout or 0) + payout_amount

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤—ã–ø–ª–∞—Ç—ã
        payout_record = Payout(user_id=user_id, amount=amount, issued_by=admin_id)
        session.add(user)
        session.add(payout_record)
        await session.commit()
        await message.answer(f"–í—ã–ø–ª–∞—Ç–∞ {amount} USDT –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—É—á–µ—Ç —Ä–∞–Ω–≥–∞: {percent * 100}%). –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.payout} USDT.")
        logger.info(f"Payout of {amount} USDT for user {user_id} processed by {admin_id}. New balance: {user.payout} USDT.")
    await state.clear()

# 6) –ë–∞–Ω –∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "ban_user")
async def ban_user_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to ban user without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏:")
    await state.set_state("ban_waiting_for_user_id")
    await callback.answer()

@router.message(F.state == "ban_waiting_for_user_id")
async def ban_user_get_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        logger.error(f"Invalid user ID input for ban by {message.from_user.id}: {message.text}")
        return
    await state.update_data(user_id=user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ (0 ‚Äî —á—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å):")
    await state.set_state("ban_waiting_for_days")

@router.message(F.state == "ban_waiting_for_days")
async def ban_user_set_days(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        logger.error(f"Invalid number of days input for ban by {message.from_user.id}: {message.text}")
        return
    data = await state.get_data()
    user_id = data.get("user_id")
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            logger.warning(f"User {user_id} not found for admin {message.from_user.id}.")
            return
        if days == 0:
            user.banned_until = None
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            logger.info(f"User {user_id} unbanned by admin {message.from_user.id}.")
        else:
            user.banned_until = datetime.utcnow() + timedelta(days=days)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
            logger.info(f"User {user_id} banned for {days} days by admin {message.from_user.id}.")
        session.add(user)
        await session.commit()
    await state.clear()

# 7) –ü–æ—Å—Ç–∏–Ω–≥ –≤ –±–æ—Ç–∞
@router.callback_query(F.data == "post_bot")
async def post_bot_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to post in bot without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞:")
    await state.set_state("post_bot_waiting_text")
    await callback.answer()

@router.message(F.state == "post_bot_waiting_text")
async def post_bot_send(message: types.Message, state: FSMContext):
    text = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç
    await message.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–æ—Ç–µ:\n\n" + text)
    logger.info(f"Post sent to bot by admin {message.from_user.id}: {text}")
    await state.clear()

# 8) –ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª
@router.callback_query(F.data == "post_channel")
async def post_channel_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        logger.warning(f"User {callback.from_user.id} tried to post in channel without admin rights.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞:")
    await state.set_state("post_channel_waiting_text")
    await callback.answer()

@router.message(F.state == "post_channel_waiting_text")
async def post_channel_send(message: types.Message, state: FSMContext):
    text = message.text
    for ch_id in CHANNEL_IDS:
        try:
            await message.bot.send_message(ch_id, text)
        except Exception as e:
            logger.error(f"Failed to post in channel {ch_id}: {e}")
    await message.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
    logger.info(f"Post sent to channels by admin {message.from_user.id}: {text}")
    await state.clear()
